---
title: "Sampling Design"
author: "Brian Maitner"
date: "3/3/2023"
output: html_document
---

# Terrestrial sampling options
In this file, the goal is to:
  
1) Examine the environmental coverage available within focal sites
2) Attempt to subdivide those focal sites into clusters for representative sampling


```{r setup}
#| echo: false
#| message: false
#| warning: false
#| fig.width: 10
#| fig.height: 10
#| include: false

# Load required packages

library(googledrive)
library(terra)
library(ggplot2)
library(stars)
library(sf)
library(movecost) #https://www.sciencedirect.com/science/article/pii/S2352711019302341#fig2
library(piggyback)
library(tidyverse)
library(leaflet)
library(leafem)

source("https://raw.githubusercontent.com/AdamWilsonLab/emma_envdata/main/R/robust_download_file.R")
source("https://raw.githubusercontent.com/AdamWilsonLab/emma_envdata/main/R/robust_pb_download.R")


#Load required data

domain <- st_read("data/output/domain.gpkg") #the full domain
sampling_options <- st_read("data/output/sampling_options.gpkg") #parks falling within the domain
acceptable_sites <- st_read("data/output/acceptable_sites.gpkg")


```


# Sampling options

```{r sampling options}
#| echo: false
#| message: false
#| warning: false
#| fig.cap: "Figure 1. The full domain (light grey), available study sites (dark grey), and focal study sites (red)."
#| fig.width: 20
#| fig.height: 14
#| strip.white: TRUE

ggplot()+
  geom_sf(data = domain, col = "black")+
  geom_sf(data = sampling_options,fill="dark grey",col = "dark grey")+
  geom_sf(data = acceptable_sites, fill="red", col = "red")


```


# Focal sites

Focal study sites have been selected on the basis of the following criteria:
  
  * occur in the domain
* occur within a national park
* occur within 1 km of a road
* have a mean NDVI over the last year of > 0.2
* have a slope < 30 degrees
* are within an estimated hiking time of 2 hours from the road

# Clustering

To better stratify our sampling, we'll use k-means clustering to divide up the cells within the domain into clusters.

The variables going into the clustering are:

* ~~Distance from water (including either rivers or wetlands, but not including the ocean)~~
* Drought (the number of droughts since 2000, quantified as the number SPEI values less than -1 since 2000)
* Soil Depth (from ISDASOIL, depth to bedrock, with a maximum values of 2 meters)
* Annual Mean Temperature
* Annual Precipitation
* Precipitation Seasonality (Coefficient of Variation)

```{r pull climate data if needed}
#| echo: false
#| message: false
#| warning: false
#| fig.width: 10
#| fig.height: 10

    # get climate data
  
      if(getOption('timeout') < 1000 ){
        
        options(timeout = 1000)
        
      }
  
      bio_vec <-
        c("01","12","15")
      

      if(!dir.exists("data/climate/")){dir.create("data/climate/",recursive = TRUE)}

      for(i in bio_vec){
        
        if(file.exists(file.path("data/climate/",paste("CHELSA_bio10_",i,"_V1.2.tif",sep = "")))){next}
        
        robust_download_file(url =
                               paste("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V1/climatologies/bio/CHELSA_bio10_",i,".tif",sep = ""),
                             destfile = file.path("data/climate/",paste("CHELSA_bio10_",i,"_V1.2.tif",sep = "")),
                             max_attempts = 10,
                             sleep_time = 10
        )
        
        # load
        rast_i <- terra::rast(file.path("data/climate/",paste("CHELSA_bio10_",i,"_V1.2.tif",sep = "")))
        
        # transform domain if needed
        
        if(!exists("domain_tf")){
          
          domain %>%
            st_transform(crs = st_crs(rast_i)) -> domain_tf
          
        }
        
        # crop
        
        rast_i <- terra::crop(x = rast_i,
                              y = ext(domain_tf))

        # save raster
        terra::writeRaster(x = rast_i,
                           filename = file.path("data/climate/",paste("CHELSA_bio10_",i,"_V1.2.tif",sep = "")),
                           overwrite = TRUE)
        

        rm(rast_i)
        
      }
      
      rm(i,bio_vec)




```


```{r load data for clustering and analyses}
#| echo: false
#| message: false
#| warning: false
#| fig.width: 10
#| fig.height: 10


dist_from_water <- rast("data/output/distance_from_freshwater.tif")

drought <- terra::rast("data/output/drought.tif")
        
climate <- terra::rast(list.files("data/climate",
                                          full.names = TRUE)) %>%
            terra::project(y = dist_from_water)


soil_depth <- rast("data/output/soil_depth_ISDASOIL.tif")[[1]]


```

Here I'm using k-means clustering to divide the data into 20 clusters. The number 20 was chosen entirely arbitrarily.


```{r do clustering}
#| echo: false
#| message: false
#| warning: false
#| fig.width: 10
#| fig.height: 10


# Do clustering if needed

if(!file.exists("temp/k_clusters_domain.rds")){
  
  clim_vals_domain <-
    terra::extract(x = c(climate,
                         soil_depth,
                         #dist_from_water,
                         drought),
                   y = vect(st_transform(x = domain,
                                         crs = crs(dist_from_water))),
                   cells=TRUE,
                   xy=TRUE)%>%
    dplyr::select(-ID) %>%
    na.omit() -> clim_vals_domain
  
  k_clusters_domain <- kmeans(x = clim_vals_domain %>%
                                dplyr::select(-x,-y,-cell) %>%
                                scale(),
                              centers = 20,
                              nstart = 1000,
                              iter.max = 10000000)
  
  saveRDS(object = k_clusters_domain,file = "temp/k_clusters_domain.rds")
  
}else{
  
  k_clusters_domain <- readRDS(file = "temp/k_clusters_domain.rds")
  
  clim_vals_domain <-
    terra::extract(x = c(climate, soil_depth, dist_from_water, drought),
                   y = vect(st_transform(x = domain,crs = crs(dist_from_water))),
                   cells=TRUE,
                   xy=TRUE)%>%
    dplyr::select(-ID) %>%
    na.omit() -> clim_vals_domain
  
}




```

## Visualizing our clusters

### Geographic space

```{r cluster locations}
#| echo: false
#| message: false
#| warning: false
#| fig.width: 20
#| fig.height: 14
#| strip.white: TRUE
#| fig.cap: "Figure 2. Spatial distribution of clusters. Polygons denote focal sampling locations."


k_raster_domain <- dist_from_water
k_raster_domain[1:ncell(k_raster_domain)] <- NA
k_raster_domain[clim_vals_domain$cell] <- k_clusters_domain$cluster
varnames(k_raster_domain)  <- "cluster"
names(k_raster_domain)<-"cluster"


# make a data frame of the whole domain for plotting
  k_raster_domain %>%
    mask(mask = acceptable_sites %>%
           st_transform(crs = st_crs(k_raster_domain))%>%
           vect())%>%
    as.factor() %>%
    as.data.frame(xy = TRUE) %>%
    na.omit()%>%
    mutate(cluster = as.factor(label))-> k_df_domain_masked  


#make a data frame of the focal areas
k_raster_domain %>%
  as.factor() %>%
  as.data.frame(xy = TRUE) %>%
  na.omit()%>%
  mutate(cluster = as.factor(label))-> k_df_domain

#plot the clusters
ggplot(data = k_df_domain) +
  geom_tile(aes(x = x, y = y, fill = cluster))+
  scale_fill_discrete()+
  geom_sf(data = st_transform(acceptable_sites,crs = crs(k_raster_domain)),fill=NA)+
  geom_sf(data = st_transform(domain,crs = crs(k_raster_domain)),fill=NA)+
  xlab(NULL)+
  ylab(NULL)





```


```{r cluster histograms}
#| echo: false
#| message: false
#| warning: false
#| fig.width: 10
#| fig.height: 10
#| fig.cap: "Figure 3. Distribution of clusters across the domain (grey) and focal regions (blue)."

k_df_domain %>%
  ggplot()+
  geom_histogram(aes(cluster),stat = "count",fill="grey",group = "domain")+
  geom_histogram(data = k_df_domain_masked,mapping = aes(cluster),fill = "blue",stat = "count",group = "focal")+
  scale_fill_manual(name="group",values=c("blue","grey"),labels=c("domain","focal"))


```


### Environmental space

```{r clusters in environmental space}
#| echo: false
#| message: false
#| warning: false
#| fig.cap: "Figure 4. Mean Annual Temperature vs. Mean Annual Precipitation.  Colored dots represent clusters in the focal sites and grey areas represent the entire domain."
#| fig.width: 10
#| fig.height: 10
#| strip.white: TRUE


#Examining our spread in climate space

k_df_domain %>%
  left_join(clim_vals_domain)-> k_df_w_climate

k_df_domain_masked %>%
  left_join(clim_vals_domain)-> k_df_masked_w_climate

#temp and precip
ggplot(data = k_df_w_climate,
       mapping = aes(x=CHELSA_bio10_01_V1.2,
                     y = CHELSA_bio10_12_V1.2
       ))+
  geom_point(col = "grey")+
  geom_point(data = k_df_masked_w_climate,
             mapping = aes(x=CHELSA_bio10_01_V1.2,
                           y = CHELSA_bio10_12_V1.2,
                           col = cluster))+
  xlab("Mean Annual Temperature")+
  ylab("Mean Annual Precipitation")




```

```{r seasonality and soil}
#| echo: FALSE
#| message: false
#| warning: false
#| fig.cap: "Figure 5. Precipitation Seasonality vs. Soil Depth.  Colored dots represent clusters in the focal sites and grey areas represent the entire domain."
#| fig.width: 10
#| fig.height: 10
#| strip.white: TRUE


#season and soil
ggplot(data = k_df_w_climate,
       mapping = aes(x=CHELSA_bio10_15_V1.2,
                     y = mean_0_200
       ))+
  geom_point(col = "grey")+
  geom_point(data = k_df_masked_w_climate,
             mapping = aes(x=CHELSA_bio10_15_V1.2,
                           y = mean_0_200,
                           col = cluster))+
  xlab("seasonality")+
  ylab("soil depth")



```


```{r distance to water and drought}
#| echo: FALSE
#| message: false
#| warning: false
#| fig-cap: "Figure 6. Precipitation vs. Drought.  Colored dots represent clusters in the focal sites and grey areas represent the entire domain."
#| fig.width: 10
#| fig.height: 10
#| strip.white: TRUE

#Precipitation and droughts

ggplot(data = k_df_w_climate,
       mapping = aes(x=CHELSA_bio10_12_V1.2,
                     y =sum
       ))+
  geom_point(col = "grey")+
  geom_point(data = k_df_masked_w_climate,
             mapping = aes(x=CHELSA_bio10_12_V1.2,
                           y = sum,
                           col = cluster))+
  xlab("annual precipitation")+
  ylab("drought")



```


### Vegetation Types

```{r get veg data}
#| echo: FALSE
#| message: false
#| warning: false
#| fig-cap: "Figure 7. Distribution of biomes across the domain (grey) and focal regions (blue)"
#| fig.width: 10
#| fig.height: 10
#| strip.white: TRUE
#| results: hide
#| fig.keep: 'all'

# Load veg map
  vegmap <- st_read("data/manual_downloads/VEGMAP2018_AEA_16082019Final/NVM2018_AEA_V22_7_16082019_final.shp") %>%
    st_transform(crs = st_crs(k_raster_domain)) %>% #transform into our CRS
    st_intersection(y = domain %>%
  st_transform(crs = st_crs(k_raster_domain))) %>%
  dplyr::select(-domain)

# Make a raster version of vegmap for simplicity
  vegmap %>%
    filter(BIOME_18 != "<Null>") %>% #null category throws an error in more recent versions of terra
    vect() %>%
    terra::rasterize(y = k_raster_domain,
                     field = "BIOME_18") -> biome_raster


#data frames of the focal areas
  biome_raster %>%
    as.data.frame(xy = TRUE) %>%
    na.omit() -> biome_df_domain
  
  biome_raster %>%
    mask(mask = acceptable_sites %>%
           st_transform(crs = st_crs(biome_raster)) %>%
           vect()) %>%
    as.data.frame(xy = TRUE) %>%
    na.omit() -> biome_df_domain_masked  

#Plot the number of cells in each biome
biome_df_domain %>%
  filter(BIOME_18 != "<Null>")%>%
  ggplot()+
  geom_bar(aes(BIOME_18),
                 stat = "count",
                 fill="grey",
                 group = "domain")+
  geom_bar(data = biome_df_domain_masked%>%
  filter(BIOME_18 != "<Null>"),
                 mapping = aes(BIOME_18),
                 fill = "blue",
                 stat = "count",
                 group = "focal")+
  scale_fill_manual(name="group",
                    values=c("blue","grey"),
                    labels=c("domain","focal"))+
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))






```

### Interactive map

The map below is interactive and allows zooming, moving, and toggling layers on/off. The cluster polygons are available <u><a href="https://github.com/BioSCape-io/campaign_planning/raw/main/data/output/cluster_polygons.gpkg">here</a>.</u> 

```{r leaflet plot of clusters}
#| echo: FALSE
#| message: false
#| warning: false
#| fig-cap: "Figure 8. Sampling options within parks.  Park boundaries are denoted by black lines, sampling locations are colored by cluster. Additional polygons delimited current flight plans (white) and areas of interest indicated by BIOSCAPE PIs (brown)."
#| fig.width: 10
#| fig.height: 10
#| strip.white: TRUE

#Pull in other bioscape layers

flights <- st_read("data/manual_downloads/BIOSCAPE_proposed/20221026_flightboxes.gpkg",quiet = TRUE) %>%
    st_transform(crs = st_crs(4326))

team_requests <- st_read("data/manual_downloads/BIOSCAPE_proposed/20221014_team_polygons.gpkg",quiet = TRUE)%>%
    st_transform(crs = st_crs(4326))

# Convert clusters to polygons
  k_raster_domain %>%
    mask(mask = acceptable_sites %>%
           st_transform(crs = st_crs(k_raster_domain))%>%
           vect()) %>%
      terra::as.polygons() %>%
    st_as_sf() -> cluster_polys

# Make wgs84 versions
  cluster_polys %>%
    st_transform(crs = st_crs(4326)) -> cluster_polys_wgs84
  
  domain %>%
    st_transform(crs = st_crs(4326)) -> domain_wgs84
  
  sampling_options %>%
    st_transform(crs = st_crs(4326)) -> sampling_options_wgs84
  
  #plot(cluster_polys_wgs84)
  
# Save the cluster polygons
  cluster_polys_wgs84 %>%
    st_write(dsn = "data/output/cluster_polygons.gpkg",
             append=FALSE,
             quiet = TRUE)
  
# Make a palette
  pal <- colorFactor(palette = "Set1",
                      domain = unique(cluster_polys_wgs84$cluster))

# Make lables
  labels <- sprintf(paste("Cluster: ",as.character(cluster_polys_wgs84$cluster),sep = "")) %>%
    lapply(htmltools::HTML)
  
  labels2 <- sprintf(as.character(sampling_options_wgs84$park_name)) %>%
    lapply(htmltools::HTML)

leaflet(data = cluster_polys_wgs84) %>%
  addProviderTiles("Esri.NatGeoWorldMap", group = "NatGeo") %>%
  #addProviderTiles("NASAGIBS.ModisTerraTrueColorCR", group = "True Colors") %>%
  addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
  addMapPane("clusters", zIndex = 420) %>%
  addMapPane("parks", zIndex = 410)%>% 
  addPolygons(stroke = FALSE,
              group = "Cluster",
              color = ~pal(cluster),
              fillOpacity = 1,
              label = labels,
              options = pathOptions(pane = "clusters"))%>%
  addPolygons(data = domain_wgs84,
              stroke = TRUE,
              color = "grey",
              fill = FALSE,
              weight = 3) %>%
    addPolygons(data = sampling_options_wgs84,
              stroke = TRUE,
              color = "black",
              fill = TRUE,
              weight = 2,
              label = labels2,
              fillColor = NA,
              fillOpacity = 0,
              group = "Park",
              options = pathOptions(pane = "parks")) %>%
      addPolygons(data = flights,
                  stroke = TRUE,
                  color = "white",
                  group = "Flights") %>%
      addPolygons(data = team_requests%>%
                st_zm(drop = T, what = "ZM"),
                  stroke = TRUE,
                  color = "brown",
                  group = "Requests")%>%  
    addMouseCoordinates() %>%
    #addImageQuery(sampling_options_wgs84, type="mousemove", layerId = "park_name") %>%
  leaflet::addLegend(position = "bottomright",
            pal = pal,
            values = unique(cluster_polys_wgs84$cluster),
            opacity = 1,
            title = "Cluster",
            labels = unique(cluster_polys_wgs84$cluster)) %>%
    addLayersControl(
    baseGroups = c("World Imagery","NatGeo"),
    overlayGroups = c("Park","Flights","Cluster","Requests"),
    options = layersControlOptions(collapsed = FALSE),
    position = "topright")



```


# Distribution of clusters across parks


```{r,eval=FALSE,echo=FALSE}

sampling_options %>%
  st_intersection(y = cluster_polys %>%
                    st_transform(crs = st_crs(sampling_options))) %>%
  group_by(cluster, park_name)%>%
  summarise(geom = st_union(geom)) %>%
  ungroup()%>%
  mutate(area_in_park = st_area(geom)) -> clusters_in_parks

clusters_in_parks %>%
  group_by(cluster) %>%
  mutate(total_area_in_parks = sum(area_in_park)) %>%
  ungroup() %>%
  group_by(park_name,cluster) %>%
  mutate(frac_in_park = sum(area_in_park)/total_area_in_parks) %>%
  mutate(frac_in_park = round(x = frac_in_park,digits = 2))-> clusters_in_parks

sampling_options %>%
  ggplot()+
  geom_sf()+
  geom_sf(data = sampling_options %>%
            filter(park_name == "Tankwa-Karoo National Park"),
          fill="red")

clusters_in_parks %>%
  group_by(park_name)%>%
  summarise(frac_sum = sum(frac_in_park),
            mean_frac = mean(frac_in_park),
            n_clusters = n()) %>%
  st_drop_geometry() %>%
  full_join(y = sampling_options %>%
              group_by(park_name)%>%
              summarize(park_area = st_area(geom) %>% sum) %>%
              st_drop_geometry()) %>%
  filter(!is.na(n_clusters))-> cluster_per_park_summary

clusters_in_parks %>%
  group_by(cluster) %>%
  summarise(parks_occupied = n(),
            max_fract_per_park = max(frac_in_park) ) %>%
  st_drop_geometry() -> park_per_cluster_summary

clusters_in_parks %>%
  group_by(cluster)%>%
  slice_max(frac_in_park) %>%
  st_drop_geometry() %>%
  select(cluster,frac_in_park,max_park = park_name)%>%
  inner_join(y = park_per_cluster_summary,
             by =c("cluster"="cluster",
                   "frac_in_park"="max_fract_per_park" ) )%>%
  rename(frac_in_max_park = frac_in_park,
         total_parks_occupied = parks_occupied) -> max_coverage_per_park
  
length(unique(max_coverage_per_park$max_park))

table(max_coverage_per_park$max_park)

clusters_in_parks %>%
  filter(park_name %in% c("Tankwa-Karoo National Park","Groot Swartberg Nature Reserve"))%>%
  st_drop_geometry() %>%
  pull(cluster)%>%
  unique()%>%
  length()

# c("Tankwa-Karoo National Park","Groot Swartberg Nature Reserve") contain 12 clusters, and are the biggest parks for 9. Focusing on these first would be useful if we're faced with logistical challenges.

sampling_options%>%
  inner_join(cluster_per_park_summary)%>%
  ggplot()+
  geom_sf(mapping = aes(fill=n_clusters))



```


# Clustering - fynbos only

```{r do fynbos clustering}
#| echo: false
#| message: false
#| warning: false
#| fig.width: 10
#| fig.height: 10


# Do clustering if needed

if(!file.exists("temp/k_clusters_fynbos.rds")){
  
  #Mask data to fynbos using the vegmap
  
    vegmap %>%
      filter(BIOME_18 == "Fynbos")%>%
      select(BIOMEID_18)%>%
      plot()
  
  fynbos_data <-
  mask(x = c(climate,
             soil_depth,
             #dist_from_water,
             drought),
    mask = vegmap %>%
      filter(BIOME_18 == "Fynbos")
      )
  
  clim_vals_fynbos <-
    terra::extract(x = fynbos_data,
                   y = vect(st_transform(x = domain,
                                         crs = crs(dist_from_water))),
                   cells=TRUE,
                   xy=TRUE)%>%
    dplyr::select(-ID) %>%
    na.omit()
  
  k_clusters_fynbos <- kmeans(x = clim_vals_fynbos %>%
                                dplyr::select(-x,-y,-cell) %>%
                                scale(),
                              centers = 20,
                              nstart = 1000,
                              iter.max = 10000000)
  
  saveRDS(object = k_clusters_fynbos,
          file = "temp/k_clusters_fynbos.rds")
  
}else{
  
  k_clusters_fynbos <- readRDS(file = "temp/k_clusters_fynbos.rds")
  
    fynbos_data <-
      mask(x = c(climate,
                 soil_depth,
                 #dist_from_water,
                 drought),
           mask = vegmap %>%
             filter(BIOME_18 == "Fynbos")
           )
  
  clim_vals_fynbos <-
    terra::extract(x = fynbos_data,
                   y = vect(st_transform(x = domain,
                                         crs = crs(dist_from_water))),
                   cells=TRUE,
                   xy=TRUE)%>%
    dplyr::select(-ID) %>%
    na.omit()

  
}




```

## Visualizing our fynbos clusters

### Geographic space

```{r cluster locations fynbos}
#| echo: false
#| message: false
#| warning: false
#| fig.width: 20
#| fig.height: 14
#| strip.white: TRUE
#| fig.cap: "Figure 10. Spatial distribution of clusters. Polygons denote focal sampling locations."


k_raster_fynbos <- dist_from_water
k_raster_fynbos[1:ncell(k_raster_fynbos)] <- NA
k_raster_fynbos[clim_vals_fynbos$cell] <- k_clusters_fynbos$cluster

varnames(k_raster_fynbos)  <- "cluster"
names(k_raster_fynbos)<-"cluster"


# make a data frame of the whole domain for plotting
  k_raster_fynbos %>%
    mask(mask = acceptable_sites %>%
           st_transform(crs = st_crs(k_raster_fynbos))%>%
           vect())%>%
    as.factor() %>%
    as.data.frame(xy = TRUE) %>%
    na.omit()%>%
    mutate(cluster = as.factor(label))-> k_df_fynbos_masked  


#make a data frame of the focal areas
k_raster_fynbos %>%
  as.factor() %>%
  as.data.frame(xy = TRUE) %>%
  na.omit()%>%
  mutate(cluster = as.factor(label))-> k_df_fynbos

#plot the clusters
ggplot(data = k_df_fynbos) +
  geom_tile(aes(x = x, y = y, fill = cluster))+
  scale_fill_discrete()+
  geom_sf(data = st_transform(acceptable_sites,crs = crs(k_raster_domain)),fill=NA)+
  geom_sf(data = st_transform(domain,crs = crs(k_raster_domain)),fill=NA)+
  xlab(NULL)+
  ylab(NULL)





```

```{r fynbos cluster histograms}
#| echo: false
#| message: false
#| warning: false
#| fig.width: 10
#| fig.height: 10
#| fig.cap: "Figure 11. Distribution of clusters across fynbos (grey) and focal regions (blue)."

k_df_fynbos %>%
  ggplot()+
  geom_histogram(aes(cluster),stat = "count",fill="grey",group = "domain")+
  geom_histogram(data = k_df_fynbos_masked,mapping = aes(cluster),fill = "blue",stat = "count",group = "focal")+
  scale_fill_manual(name="group",values=c("blue","grey"),labels=c("domain","focal"))


```


### Environmental space

```{r fynbos clusters in environmental space}
#| echo: false
#| message: false
#| warning: false
#| fig.cap: "Figure 12. Mean Annual Temperature vs. Mean Annual Precipitation.  Colored dots represent clusters in the focal sites and grey areas represent the entire domain."
#| fig.width: 10
#| fig.height: 10
#| strip.white: TRUE


#Examining our spread in climate space

k_df_fynbos %>%
  left_join(clim_vals_domain)-> k_df_w_climate

k_df_fynbos_masked %>%
  left_join(clim_vals_domain)-> k_df_masked_w_climate

#temp and precip
ggplot(data = k_df_w_climate,
       mapping = aes(x=CHELSA_bio10_01_V1.2,
                     y = CHELSA_bio10_12_V1.2
       ))+
  geom_point(col = "grey")+
  geom_point(data = k_df_masked_w_climate,
             mapping = aes(x=CHELSA_bio10_01_V1.2,
                           y = CHELSA_bio10_12_V1.2,
                           col = cluster))+
  xlab("Mean Annual Temperature")+
  ylab("Mean Annual Precipitation")




```

```{r fynbos seasonality and soil}
#| echo: FALSE
#| message: false
#| warning: false
#| fig.cap: "Figure 13. Precipitation Seasonality vs. Soil Depth.  Colored dots represent clusters in the focal sites and grey areas represent the entire domain."
#| fig.width: 10
#| fig.height: 10
#| strip.white: TRUE


#season and soil
ggplot(data = k_df_w_climate,
       mapping = aes(x=CHELSA_bio10_15_V1.2,
                     y = mean_0_200
       ))+
  geom_point(col = "grey")+
  geom_point(data = k_df_masked_w_climate,
             mapping = aes(x=CHELSA_bio10_15_V1.2,
                           y = mean_0_200,
                           col = cluster))+
  xlab("seasonality")+
  ylab("soil depth")



```


```{r fynbos distance to water and drought}
#| echo: FALSE
#| message: false
#| warning: false
#| fig-cap: "Figure 14. Precipitation vs. Drought.  Colored dots represent clusters in the focal sites and grey areas represent the entire domain."
#| fig.width: 10
#| fig.height: 10
#| strip.white: TRUE

#Precipitation and droughts

ggplot(data = k_df_w_climate,
       mapping = aes(x=CHELSA_bio10_12_V1.2,
                     y =sum
       ))+
  geom_point(col = "grey")+
  geom_point(data = k_df_masked_w_climate,
             mapping = aes(x=CHELSA_bio10_12_V1.2,
                           y = sum,
                           col = cluster))+
  xlab("annual precipitation")+
  ylab("drought")



```

### Interactive Map of fynbos clusters

```{r leaflet plot of fynbos clusters}
#| echo: FALSE
#| message: false
#| warning: false
#| fig-cap: "Figure 15. Sampling options within parks.  Park boundaries are denoted by black lines, sampling locations are colored by cluster. Additional polygons delimited current flight plans (white) and areas of interest indicated by BIOSCAPE PIs (brown)."
#| fig.width: 10
#| fig.height: 10
#| strip.white: TRUE

#Pull in other bioscape layers

# Convert clusters to polygons
  k_raster_fynbos %>%
    mask(mask = acceptable_sites %>%
           st_transform(crs = st_crs(k_raster_fynbos))%>%
           vect()) %>%
      terra::as.polygons() %>%
    st_as_sf() -> fynbos_cluster_polys

# Make wgs84 versions
  fynbos_cluster_polys %>%
    st_transform(crs = st_crs(4326)) -> fynbos_cluster_polys_wgs84
  
  #plot(cluster_polys_wgs84)
  
# Save the cluster polygons
  fynbos_cluster_polys_wgs84 %>%
    st_write(dsn = "data/output/fynbos_cluster_polygons.gpkg",
             append=FALSE,
             quiet = TRUE)
  
# Make a palette
  pal <- colorFactor(palette = "Set1",
                      domain = unique(fynbos_cluster_polys_wgs84$cluster))

# Make labels
  labels <- sprintf(paste("Cluster: ",as.character(fynbos_cluster_polys_wgs84$cluster),sep = "")) %>%
    lapply(htmltools::HTML)
  
  labels2 <- sprintf(as.character(sampling_options_wgs84$park_name)) %>%
    lapply(htmltools::HTML)

leaflet(data = fynbos_cluster_polys_wgs84) %>%
  addProviderTiles("Esri.NatGeoWorldMap", group = "NatGeo") %>%
  #addProviderTiles("NASAGIBS.ModisTerraTrueColorCR", group = "True Colors") %>%
  addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
  addMapPane("clusters", zIndex = 420) %>%
  addMapPane("parks", zIndex = 410)%>% 
  addPolygons(stroke = FALSE,
              group = "Cluster",
              color = ~pal(cluster),
              fillOpacity = 1,
              label = labels,
              options = pathOptions(pane = "clusters"))%>%
  addPolygons(data = domain_wgs84,
              stroke = TRUE,
              color = "grey",
              fill = FALSE,
              weight = 3) %>%
    addPolygons(data = sampling_options_wgs84,
              stroke = TRUE,
              color = "black",
              fill = TRUE,
              weight = 2,
              label = labels2,
              fillColor = NA,
              fillOpacity = 0,
              group = "Park",
              options = pathOptions(pane = "parks")) %>%
      addPolygons(data = flights,
                  stroke = TRUE,
                  color = "white",
                  group = "Flights") %>%
      addPolygons(data = team_requests%>%
                st_zm(drop = T, what = "ZM"),
                  stroke = TRUE,
                  color = "brown",
                  group = "Requests")%>%  
    addMouseCoordinates() %>%
    #addImageQuery(sampling_options_wgs84, type="mousemove", layerId = "park_name") %>%
  leaflet::addLegend(position = "bottomright",
            pal = pal,
            values = unique(fynbos_cluster_polys_wgs84$cluster),
            opacity = 1,
            title = "Cluster",
            labels = unique(fynbos_cluster_polys_wgs84$cluster)) %>%
    addLayersControl(
    baseGroups = c("World Imagery","NatGeo"),
    overlayGroups = c("Park","Flights","Cluster","Requests"),
    options = layersControlOptions(collapsed = FALSE),
    position = "topright")



```

### Abundance of clusters within parks

```{r,eval=TRUE,echo=FALSE}
#| echo: FALSE
#| message: false
#| warning: false
#| fig-cap: "Fig. 16. Number of different clusters per park"
#| fig.width: 10
#| fig.height: 5
#| strip.white: TRUE

sampling_options %>%
  st_intersection(y = fynbos_cluster_polys %>%
                    st_transform(crs = st_crs(sampling_options))) %>%
  group_by(cluster, park_name)%>%
  summarise(geom = st_union(geom)) %>%
  ungroup()%>%
  mutate(area_in_park = st_area(geom)) -> fynbos_clusters_in_parks

fynbos_clusters_in_parks %>%
  group_by(cluster) %>%
  mutate(total_area_in_parks = sum(area_in_park)) %>%
  ungroup() %>%
  group_by(park_name,cluster) %>%
  mutate(frac_in_park = sum(area_in_park)/total_area_in_parks) %>%
  mutate(frac_in_park = round(x = frac_in_park,digits = 2))-> fynbos_clusters_in_parks

# sampling_options %>%
#   ggplot()+
#   geom_sf()+
#   geom_sf(data = sampling_options %>%
#             filter(park_name == "Tankwa-Karoo National Park"),
#           fill="red")

fynbos_clusters_in_parks %>%
  group_by(park_name)%>%
  summarise(frac_sum = sum(frac_in_park),
            mean_frac = mean(frac_in_park),
            n_clusters = n()) %>%
  st_drop_geometry() %>%
  full_join(y = sampling_options %>%
              group_by(park_name)%>%
              summarize(park_area = st_area(geom) %>% sum) %>%
              st_drop_geometry()) %>%
  filter(!is.na(n_clusters))-> fynbos_cluster_per_park_summary

fynbos_clusters_in_parks %>%
  group_by(cluster) %>%
  summarise(parks_occupied = n(),
            max_fract_per_park = max(frac_in_park) ) %>%
  st_drop_geometry() -> fynbos_park_per_cluster_summary

fynbos_clusters_in_parks %>%
  group_by(cluster)%>%
  slice_max(frac_in_park) %>%
  st_drop_geometry() %>%
  select(cluster,frac_in_park,max_park = park_name)%>%
  inner_join(y = fynbos_park_per_cluster_summary,
             by =c("cluster"="cluster",
                   "frac_in_park"="max_fract_per_park" ) )%>%
  rename(frac_in_max_park = frac_in_park,
         total_parks_occupied = parks_occupied) -> fynbos_max_coverage_per_park
  
#save outputs as csv
  write.csv(x = fynbos_park_per_cluster_summary,
            file = "data/output/park_per_fynbos_cluster_summary.csv",
            row.names = FALSE)
  
#save outputs as csv
  write.csv(x = fynbos_cluster_per_park_summary,
            file = "data/output/fynbos_cluster_per_park_summary.csv",
            row.names = FALSE)  
  
#save output
  
  st_write(obj = fynbos_clusters_in_parks,
           dsn = "data/output/fynbos_clusters_in_parks.gpkg",
           append = FALSE,
           quiet = TRUE)  


sampling_options %>%
  inner_join(fynbos_cluster_per_park_summary) %>%
  ggplot()+
  geom_sf(mapping = aes(fill=n_clusters))




```

### Preliminary points on the map

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| fig-cap: "Fig. 17. All of the above with points"
#| fig.width: 10
#| fig.height: 5
#| strip.white: TRUE

### Get number of samples per cluster in proportion to pixels in unmasked domain
# Get nsamples
nsamp <- k_df_w_climate %>% group_by(cluster) %>% summarize(n = floor(n()/nrow(k_df_w_climate)*300))

set.seed(4563)

# Convoluted code to sample in proportion to unmasked domain - see https://jennybc.github.io/purrr-tutorial/ls12_different-sized-samples.html
fsamp <- k_df_masked_w_climate %>%
  arrange(cluster) %>%
  group_by(cluster) %>% 
  nest() %>%            
  ungroup() %>% 
  mutate(n = nsamp$n) %>% 
  mutate(samp = map2(data, n, sample_n)) %>% 
  select(-data) %>%
  unnest(samp)

# Make spatial
fsamp <- st_as_sf(fsamp, coords = c("x", "y"), crs = st_crs(k_raster_fynbos)) %>% st_transform(crs = st_crs(domain_wgs84))
fsamp$UID <- 1:nrow(fsamp)

### Map

labels_plot <- sprintf(as.character(fsamp$UID)) %>%
    lapply(htmltools::HTML)

leaflet(data = fynbos_cluster_polys_wgs84) %>%
  addProviderTiles("Esri.NatGeoWorldMap", group = "NatGeo") %>%
  #addProviderTiles("NASAGIBS.ModisTerraTrueColorCR", group = "True Colors") %>%
  addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
  addMapPane("clusters", zIndex = 420) %>%
  addMapPane("parks", zIndex = 410)%>% 
  addPolygons(stroke = FALSE,
              group = "Cluster",
              color = ~pal(cluster),
              fillOpacity = 0.5,
              label = labels,
              options = pathOptions(pane = "clusters"))%>%
  addPolygons(data = domain_wgs84,
              stroke = TRUE,
              color = "grey",
              fill = FALSE,
              weight = 3) %>%
    addPolygons(data = sampling_options_wgs84,
              stroke = TRUE,
              color = "black",
              fill = TRUE,
              weight = 2,
              label = labels2,
              fillColor = NA,
              fillOpacity = 0,
              group = "Park",
              options = pathOptions(pane = "parks")) %>%
      addPolygons(data = flights,
                  stroke = TRUE,
                  color = "white",
                  group = "Flights") %>%
      addPolygons(data = team_requests%>%
                st_zm(drop = T, what = "ZM"),
                  stroke = TRUE,
                  color = "brown",
                  group = "Requests")%>%  
      addMarkers(data = fsamp,
              #   color = "blue",
              #   radius = 3,
                  group = "Plots",
                  label = labels_plot)%>%  
    addMouseCoordinates() %>%
    #addImageQuery(sampling_options_wgs84, type="mousemove", layerId = "park_name") %>%
  leaflet::addLegend(position = "bottomright",
            pal = pal,
            values = unique(fynbos_cluster_polys_wgs84$cluster),
            opacity = 1,
            title = "Cluster",
            labels = unique(fynbos_cluster_polys_wgs84$cluster)) %>%
    addLayersControl(
    baseGroups = c("World Imagery","NatGeo"),
    overlayGroups = c("Park","Flights","Cluster","Requests","Plots"),
    options = layersControlOptions(collapsed = FALSE),
    position = "topright")

```

